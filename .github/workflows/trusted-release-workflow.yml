name: Trusted Release Workflow

# This workflow creates a SLSA-compliant release for GitHub repositories
# It's designed as a reusable workflow that can be called from other workflows
# It enforces releases only through labeled PRs (bump:patch, bump:minor, bump:major)
on:
  workflow_call:
    inputs:
      ref:
        description: 'The Git reference (commit SHA, tag, or branch) to use'
        required: false
        default: ${{ github.sha }}
        type: string
      rekor-log-public:
        description: 'Allow repository name to be logged in public Rekor transparency log'
        required: false
        type: boolean
        default: true
      draft:
        description: 'Whether to keep the release as a draft'
        required: false
        type: boolean
        default: false
      environment:
        description: 'Environment for protecting the release flow'
        required: false
        type: string
    secrets:
      github-token:
        description: 'GitHub token with appropriate permissions'
        required: true
    outputs:
      tag_name:
        description: 'The tag name created or used for this release'
        value: ${{ jobs.version.outputs.tag_name }}
      version:
        description: 'The version number without "v" prefix'
        value: ${{ jobs.version.outputs.version }}
      release_url:
        description: 'URL of the created GitHub release'
        value: ${{ jobs.release.outputs.release_url }}

permissions: {}

jobs:
  # Check if a release is needed (dry-run)
  release-check:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for GitHub's generate-release-note API (notes are only displayed in job summary, not written to any file)
    outputs:
      skip: ${{ steps.bumpr-dry-run.outputs.skip }}
      next_version: ${{ steps.bumpr-dry-run.outputs.next_version }}
      current_version: ${{ steps.bumpr-dry-run.outputs.current_version }}
      message: ${{ steps.bumpr-dry-run.outputs.message }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ inputs.ref }}

      # Dry run to check if a version bump is needed
      - id: bumpr-dry-run
        uses: haya14busa/action-bumpr@faf6f474bcb6174125cfc569f0b2e24cbf03d496 # v1.11.4
        with:
          dry_run: true

      # Add release information to job summary
      - name: Add release information to job summary
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          echo "# Release Check Summary" >> "$GITHUB_STEP_SUMMARY"

          if [[ "${{ steps.bumpr-dry-run.outputs.skip }}" == "true" ]]; then
            {
              echo "## ⚠️ No Release Needed"
              echo "No version bump label was found on the PR. Release will be skipped."
            } >> "$GITHUB_STEP_SUMMARY"
          else
            {
              echo "## ✅ Release Needed"
              echo "A version bump label was found. The following release will be created:"
              echo ""
            } >> "$GITHUB_STEP_SUMMARY"

            # Use action-bumpr outputs with better formatting
            if [[ "${{ steps.bumpr-dry-run.outputs.next_version }}" != "" ]]; then
              CURRENT_VERSION="${{ steps.bumpr-dry-run.outputs.current_version }}"
              NEXT_VERSION="${{ steps.bumpr-dry-run.outputs.next_version }}"
              REPO_URL="https://github.com/${{ github.repository }}"
              COMPARE_URL="$REPO_URL/compare/$CURRENT_VERSION...${{ github.sha }}"

              # Create a more visually appealing format with emojis
              {
                echo "### Release Details"
                echo ""
                echo "🏷️ **New Version:** \`$NEXT_VERSION\`"
                echo ""
                echo "📦 **Current Version:** \`$CURRENT_VERSION\`"
                echo ""
              } >> "$GITHUB_STEP_SUMMARY"

              # Add tag message if available
              if [[ "${{ steps.bumpr-dry-run.outputs.message }}" != "" ]]; then
                {
                  echo "📝 **Tag Message:** ${{ steps.bumpr-dry-run.outputs.message }}"
                  echo ""
                } >> "$GITHUB_STEP_SUMMARY"
              fi

              # Add GitHub compare link
              {
                echo "📊 **Changes:** [View changes since $CURRENT_VERSION]($COMPARE_URL)"
                echo ""
              } >> "$GITHUB_STEP_SUMMARY"

              # Generate and add release notes using GitHub API
              {
                echo "### 📝 Release Notes Preview"
                echo ""
              } >> "$GITHUB_STEP_SUMMARY"

              # Call GitHub API to generate release notes
              REPO="${{ github.repository }}"

              # Call the API with the parameters (CURRENT_VERSION will be empty string if not set)
              RELEASE_NOTES=$(gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                "/repos/${REPO}/releases/generate-notes" \
                -f target_commitish="${{ github.sha }}" \
                -f tag_name="$NEXT_VERSION" \
                -f previous_tag_name="$CURRENT_VERSION" \
                --jq '.body')

              # Add the generated release notes to the summary
              {
                echo "$RELEASE_NOTES"
                echo ""
              } >> "$GITHUB_STEP_SUMMARY"
            fi
          fi

  # Environment protection job
  # This job intentionally deploys to the environment to satisfy environment
  # protection rules and avoid "Missing successful active release deployment".
  # It also serves as the single approval gate for the release flow.
  release-approval:
    needs: [release-check]
    if: needs.release-check.outputs.skip != 'true'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency:
      group: "release-approval"
      cancel-in-progress: true
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Approve release
        run: |
          echo "Release approved in the ${{ inputs.environment }} environment"
          echo "This job exists to satisfy environment deployment requirements."

  # Version management and tag creation job
  version:
    needs: [release-approval, release-check]
    if: needs.release-check.outputs.skip != 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Enable OIDC
      contents: write # Tag updates
      pull-requests: write # Post comment
    outputs:
      tag_name: ${{ steps.tag.outputs.value }}
      version: ${{ steps.extract-version.outputs.version }}
      current_version: ${{ steps.bumpr.outputs.current_version }}
      major_tag: ${{ steps.update-semver.outputs.major }}
      minor_tag: ${{ steps.update-semver.outputs.minor }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ inputs.ref }}

      # Set up signed tag configuration
      - uses: chainguard-dev/actions/setup-gitsign@f632aec66edeebe245ad686a33a0c0a2160cac31

      # EXPERIMENTAL: Use gitsign offline mode
      - run: git config --local gitsign.rekorMode offline

      # Bump version based on PR labels (bump:major,bump:minor,bump:patch)
      - id: bumpr
        uses: haya14busa/action-bumpr@faf6f474bcb6174125cfc569f0b2e24cbf03d496 # v1.11.4

      # Update corresponding major and minor tags
      - uses: haya14busa/action-update-semver@v1.5.1
        id: update-semver
        if: steps.bumpr.outputs.skip != 'true'
        with:
          tag: ${{ steps.bumpr.outputs.next_version }}

      # Get tag name from bumpr output only
      - id: tag
        run: |
          if [[ "${{ steps.bumpr.outputs.skip }}" == "true" ]]; then
            echo "value=" >> "$GITHUB_OUTPUT"
            echo "No version bump label found, skipping release."
          else
            TAG="${{ steps.bumpr.outputs.next_version }}"
            echo "value=${TAG}" >> "$GITHUB_OUTPUT"
            echo "Next version: ${TAG}"
          fi

      # Extract version number without "v" prefix (v1.2.3 → 1.2.3)
      - id: extract-version
        if: steps.tag.outputs.value != ''
        run: |
          TAG=${{ steps.tag.outputs.value }}
          VERSION=${TAG#refs/tags/v}
          VERSION=${VERSION#v}
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "Extracted version: ${VERSION}"

  # Prepare information for release attestation
  prepare-slsa:
    needs: [version]
    if: needs.version.outputs.tag_name != ''
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # Required for attestation
      contents: read    # Required for attestation
      attestations: write # Required for creating attestations
    outputs:
      base64_subjects: ${{ steps.compute-subjects.outputs.base64_subjects }}
    steps:
      # Save commit info for attestation
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      # Compute tag SHA (git rev-parse <tag>) and prepare SLSA generator subjects
      - name: Compute tag SHA and subjects
        id: compute-subjects
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        run: |
          TAG_NAME='${{ needs.version.outputs.tag_name }}'

          # Create a deterministic virtual artifact content directly from GitHub API (includes trailing newline)
          # Equivalent to: git rev-parse <tag>
          FILENAME="${TAG_NAME}.sha"
          gh api "repos/$GITHUB_REPOSITORY/git/refs/tags/$TAG_NAME" --jq '.object.sha' > "$FILENAME"

          # Encode the exact sha256sum output ("<sha256>  <name>") as base64 for the SLSA generator
          BASE64_SUBJECTS=$(sha256sum "$FILENAME" | base64 -w0)

          echo "base64_subjects=$BASE64_SUBJECTS" >> "$GITHUB_OUTPUT"
          echo "Computed tag SHA (rev-parse): $(cat "$FILENAME")"


  # Generate and upload SLSA provenance for the tag SHA artifact BEFORE creating the release content
  slsa-provenance:
    needs: [version, prepare-slsa]
    if: needs.version.outputs.tag_name != ''
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
      attestations: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: ${{ needs.prepare-slsa.outputs.base64_subjects }}
      upload-assets: true
      upload-tag-name: ${{ needs.version.outputs.tag_name }}
      draft-release: true
      provenance-name: release-provenance.intoto.jsonl

  # Create GitHub Release job
  release:
    needs: [version, slsa-provenance]
    if: needs.version.outputs.tag_name != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for release creation
    outputs:
      release_url: ${{ steps.create_release.outputs.release_url }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          ref: ${{ needs.version.outputs.tag_name }}

      # Create or update GitHub Release (draft may be pre-created by SLSA generator)
      - name: Update GitHub Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
          VERIFICATION_INSTRUCTIONS: |
            <details>
            <summary>📋 Release Verification Instructions</summary>

            Verify this release and its tag provenance using the following examples.

            ---

            ### 1) Using slsa-verifier

            ```
            REPO="${{ github.repository }}"
            TAG="${{ needs.version.outputs.tag_name }}"
            # Fetch tag object SHA from GitHub API (same as `git rev-parse <tag>`)
            TAG_SHA=$(curl -fsSL "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ needs.version.outputs.tag_name }}" | jq -r '.object.sha')

            # Verify SLSA provenance for the tag SHA virtual artifact
            slsa-verifier verify-artifact \
              --source-uri "github.com/${{ github.repository }}" \
              --provenance-path <(curl -fsSL "https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.tag_name }}/release-provenance.intoto.jsonl") \
              <(echo "$TAG_SHA")
            ```

            ---

            ### 2) Using [actionutils/trusted-tag-verifier](https://github.com/actionutils/trusted-tag-verifier) (GitHub Actions example)

            ```
            jobs:
              verify:
                runs-on: ubuntu-latest
                steps:
                  - uses: actionutils/trusted-tag-verifier@v0
                    with:
                      verify: '${{ github.repository }}@${{ needs.version.outputs.tag_name }}'
                      fail-on-verification-error: 'true'
                      certificate-oidc-issuer: 'https://token.actions.githubusercontent.com'
                      certificate-identity-regexp: '^https://github.com/actionutils/trusted-tag-releaser'
            ```

            ### 3) Using [gitsign](https://github.com/sigstore/gitsign)

            Clone ${{ github.repository }} and run the following command.

            ```
            gitsign verify-tag \
              --certificate-oidc-issuer='https://token.actions.githubusercontent.com'  \
              --certificate-identity-regexp='^https://github.com/actionutils/trusted-tag-releaser' \
              ${{ needs.version.outputs.tag_name }}
            ```

            </details>
        run: |
          TAG_NAME="${{ needs.version.outputs.tag_name }}"
          REPO="${GITHUB_REPOSITORY}"

          # Generate release notes using GitHub API
          echo "Generating release notes using GitHub API..."
          # Get the current version from bumpr output (will be empty string if not set)
          CURRENT_VERSION="${{ needs.version.outputs.current_version }}"

          # Call the API with the parameters
          RELEASE_NOTES=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            "/repos/${REPO}/releases/generate-notes" \
            -f tag_name="$TAG_NAME" \
            -f previous_tag_name="$CURRENT_VERSION" \
            --jq '.body')

          # Append verification instructions to the generated release notes
          NOTES_FILE="$(mktemp)"
          printf "%s\n\n%s\n" "$RELEASE_NOTES" "$VERIFICATION_INSTRUCTIONS" > "$NOTES_FILE"

          # Edit existing draft release (created by SLSA generator) with generated notes + verification section
          RELEASE_URL=$(gh release edit "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --notes-file "$NOTES_FILE" \
            --draft=${{ inputs.draft }})

          echo "release_url=$RELEASE_URL" >> "$GITHUB_OUTPUT"
          echo "Release URL: $RELEASE_URL"

  # Verify the release using gh attestation verify
  verify-release:
    needs: [release, slsa-provenance, version]
    if: needs.version.outputs.tag_name != ''
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required to read release artifacts
    steps:

      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Install slsa-verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.7.1

      - name: Verify SLSA provenance with slsa-verifier
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        run: |
          set -euo pipefail

          REPO_NAME="${GITHUB_REPOSITORY}"
          TAG="${{ needs.version.outputs.tag_name }}"
          slsa-verifier verify-artifact \
            --source-uri "github.com/$REPO_NAME" \
            --provenance-path <(curl -fsSL "https://github.com/$REPO_NAME/releases/download/${TAG}/release-provenance.intoto.jsonl") \
            <(gh api "repos/$REPO_NAME/git/refs/tags/${TAG}" --jq '.object.sha')

          echo "✅ SLSA provenance verification successful"

      - name: Verify Tag
        id: verify-tag
        uses: actionutils/trusted-tag-verifier@v0
        with:
          verify: '${{ github.repository }}@${{ needs.version.outputs.tag_name }}'
          fail-on-verification-error: 'true'
          certificate-oidc-issuer: 'https://token.actions.githubusercontent.com'
          certificate-identity-regexp: '^https://github.com/actionutils/trusted-tag-releaser'

      - name: Verify Major Tag
        id: verify-major-tag
        if: needs.version.outputs.major_tag != ''
        uses: actionutils/trusted-tag-verifier@v0
        with:
          verify: '${{ github.repository }}@${{ needs.version.outputs.major_tag }}'
          fail-on-verification-error: 'true'
          certificate-oidc-issuer: 'https://token.actions.githubusercontent.com'
          certificate-identity-regexp: '^https://github.com/actionutils/trusted-tag-releaser'

      - name: Verify Minor Tag
        id: verify-minor-tag
        if: needs.version.outputs.minor_tag != ''
        uses: actionutils/trusted-tag-verifier@v0
        with:
          verify: '${{ github.repository }}@${{ needs.version.outputs.minor_tag }}'
          fail-on-verification-error: 'true'
          certificate-oidc-issuer: 'https://token.actions.githubusercontent.com'
          certificate-identity-regexp: '^https://github.com/actionutils/trusted-tag-releaser'
