name: Release Check

# This workflow checks if a tag release is needed based on PR labels
# It's designed as a reusable workflow that can be called from other workflows
on:
  workflow_call:
    inputs:
      branch:
        description: 'The working branch'
        required: false
        default: ${{ github.event.repository.default_branch }}
        type: string
    outputs:
      skip:
        description: 'Whether to skip the release'
        value: ${{ jobs.check-version.outputs.skip }}
      next_version:
        description: 'The next version to release'
        value: ${{ jobs.check-version.outputs.next_version }}
      current_version:
        description: 'The current version'
        value: ${{ jobs.check-version.outputs.current_version }}
      message:
        description: 'Tag message'
        value: ${{ jobs.check-version.outputs.message }}

permissions:
  contents: read

jobs:
  # Check if a version bump is needed
  check-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for GitHub's generate-release-note API (notes are only displayed in job summary, not written to any file)
    outputs:
      skip: ${{ steps.bumpr-dry-run.outputs.skip }}
      next_version: ${{ steps.bumpr-dry-run.outputs.next_version }}
      current_version: ${{ steps.bumpr-dry-run.outputs.current_version }}
      message: ${{ steps.bumpr-dry-run.outputs.message }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ inputs.branch }}

      # Dry run to check if a version bump is needed
      - id: bumpr-dry-run
        uses: haya14busa/action-bumpr@faf6f474bcb6174125cfc569f0b2e24cbf03d496 # v1.11.4
        with:
          dry_run: true

      # Add release information to job summary
      - name: Add release information to job summary
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          echo "# Release Check Summary" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.bumpr-dry-run.outputs.skip }}" == "true" ]]; then
            echo "## ⚠️ No Release Needed" >> $GITHUB_STEP_SUMMARY
            echo "No version bump label was found on the PR. Release will be skipped." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ Release Needed" >> $GITHUB_STEP_SUMMARY
            echo "A version bump label was found. The following release will be created:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Use action-bumpr outputs with better formatting
            if [[ "${{ steps.bumpr-dry-run.outputs.next_version }}" != "" ]]; then
              CURRENT_VERSION="${{ steps.bumpr-dry-run.outputs.current_version }}"
              NEXT_VERSION="${{ steps.bumpr-dry-run.outputs.next_version }}"
              REPO_URL="https://github.com/${{ github.repository }}"
              COMPARE_URL="$REPO_URL/compare/$CURRENT_VERSION...${{ github.sha }}"

              # Create a more visually appealing format with emojis
              echo "### Release Details" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🏷️ **New Version:** \`$NEXT_VERSION\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "📦 **Current Version:** \`$CURRENT_VERSION\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              # Add tag message if available
              if [[ "${{ steps.bumpr-dry-run.outputs.message }}" != "" ]]; then
                echo "📝 **Tag Message:** ${{ steps.bumpr-dry-run.outputs.message }}" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi

              # Add GitHub compare link
              echo "📊 **Changes:** [View changes since $CURRENT_VERSION]($COMPARE_URL)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              # Generate and add release notes using GitHub API
              echo "### 📝 Release Notes Preview" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              # Call GitHub API to generate release notes
              REPO="${{ github.repository }}"
              
              # Call the API with the parameters (CURRENT_VERSION will be empty string if not set)
              RELEASE_NOTES=$(gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                "/repos/${REPO}/releases/generate-notes" \
                -f target_commitish="${{ github.sha }}" \
                -f tag_name="$NEXT_VERSION" \
                -f previous_tag_name="$CURRENT_VERSION" \
                --jq '.body')

              # Add the generated release notes to the summary
              echo "$RELEASE_NOTES" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi
